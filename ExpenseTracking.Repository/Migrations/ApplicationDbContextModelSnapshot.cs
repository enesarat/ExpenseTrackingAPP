// <auto-generated />
using System;
using ExpenseTracking.Repository.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExpenseTracking.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExpenseTracking.Core.Models.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8496),
                            IsActive = true,
                            Name = "Beslenme/Gıda"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8509),
                            IsActive = true,
                            Name = "Temizlik"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8510),
                            IsActive = true,
                            Name = "Teknolojik Alışveriş"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8512),
                            IsActive = true,
                            Name = "Eğlence"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8513),
                            IsActive = true,
                            Name = "Sağlık"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8514),
                            IsActive = true,
                            Name = "Acil İhtiyaç"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8516),
                            IsActive = true,
                            Name = "Giyim"
                        });
                });

            modelBuilder.Entity("ExpenseTracking.Core.Models.Concrete.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Cost = 560m,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8773),
                            Description = "Hazırlanan listeye göre aylık market alışverişi yapıldı.",
                            IsActive = true,
                            Name = "Market Alışverişi",
                            PaymentTypeId = 1,
                            TransactionDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8778),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Cost = 300m,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8780),
                            Description = "Bulaşık deterjanı, peçete ve tuvalet kağıdı alındı.",
                            IsActive = true,
                            Name = "Deterjan ve Peçete",
                            PaymentTypeId = 1,
                            TransactionDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8782),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Cost = 3400m,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8783),
                            Description = "X markanın şarjlı elektrikli süpürgesinden alındı.",
                            IsActive = true,
                            Name = "Kablosuz Süpürge",
                            PaymentTypeId = 2,
                            TransactionDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8785),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Cost = 850m,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8786),
                            Description = "Duman Grubu'nun 22 Temmuz'daki Harbiye açık hava konserine bilet alındı.",
                            IsActive = true,
                            Name = "Duman Konseri",
                            PaymentTypeId = 2,
                            TransactionDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8788),
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Cost = 200m,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8789),
                            Description = "KBB Doktor kontrolüne gidildi ve ilaç alındı.",
                            IsActive = true,
                            Name = "KBB Doktor Kontrolü",
                            PaymentTypeId = 2,
                            TransactionDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8790),
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            Cost = 250m,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8791),
                            Description = "Telefonun yırtılan kılıfının yerine yenisi alındı.",
                            IsActive = true,
                            Name = "Telefon Kılıfı",
                            PaymentTypeId = 1,
                            TransactionDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8793),
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            Cost = 1190m,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8794),
                            Description = "Eskiyen ayakkabı yerine Converse ayakkabı alındı.",
                            IsActive = true,
                            Name = "Ayakkabı",
                            PaymentTypeId = 1,
                            TransactionDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8795),
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Cost = 850m,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8796),
                            Description = "Akşam iş dönüşü dışarıda arkadaşlarla pizza ziyafeti.",
                            IsActive = true,
                            Name = "Pizza ve İçecek",
                            PaymentTypeId = 1,
                            TransactionDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8798),
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Cost = 300m,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8799),
                            Description = "Kuaförde traş olunup, özel şampuan alındı.",
                            IsActive = true,
                            Name = "Kuaför ve Şampuan",
                            PaymentTypeId = 1,
                            TransactionDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8800),
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            Cost = 430m,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8801),
                            Description = "Telefon ve tablet için powerbank alındı.",
                            IsActive = true,
                            Name = "Powerbank",
                            PaymentTypeId = 1,
                            TransactionDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8803),
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            Cost = 85m,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8804),
                            Description = "Eskiyen ayakkabı yerine Converse ayakkabı alındı.",
                            IsActive = true,
                            Name = "Sinema",
                            PaymentTypeId = 1,
                            TransactionDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8805),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ExpenseTracking.Core.Models.Concrete.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8936),
                            IsActive = true,
                            Name = "Nakit"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(8938),
                            IsActive = true,
                            Name = "Kredi"
                        });
                });

            modelBuilder.Entity("ExpenseTracking.Core.Models.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(9053),
                            IsActive = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(9055),
                            IsActive = true,
                            Name = "Standart"
                        });
                });

            modelBuilder.Entity("ExpenseTracking.Core.Models.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(9171),
                            Email = "enes@gmail.com",
                            IsActive = true,
                            Name = "Enes",
                            Password = "$2a$11$Mnqi9RoGPlhOgFalgcahL.okqa2tnZgz3gtkTs7oeHFVmlSC507GS",
                            RoleId = 1,
                            Surname = "Arat"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 7, 13, 4, 30, 51, 934, DateTimeKind.Local).AddTicks(9174),
                            Email = "eren@gmail.com",
                            IsActive = true,
                            Name = "Eren",
                            Password = "$2a$11$Owh2PufGb1wWYTUt4bNUK.iqTrAMi5E09oRPFSIKVnuRawxm.flIO",
                            RoleId = 2,
                            Surname = "Arat"
                        });
                });

            modelBuilder.Entity("ExpenseTracking.Core.Models.Concrete.Expense", b =>
                {
                    b.HasOne("ExpenseTracking.Core.Models.Concrete.Category", "Category")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpenseTracking.Core.Models.Concrete.PaymentType", "PaymentType")
                        .WithMany("Expenses")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpenseTracking.Core.Models.Concrete.User", "User")
                        .WithMany("Expenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("PaymentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpenseTracking.Core.Models.Concrete.User", b =>
                {
                    b.HasOne("ExpenseTracking.Core.Models.Concrete.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ExpenseTracking.Core.Models.Concrete.Category", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("ExpenseTracking.Core.Models.Concrete.PaymentType", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("ExpenseTracking.Core.Models.Concrete.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ExpenseTracking.Core.Models.Concrete.User", b =>
                {
                    b.Navigation("Expenses");
                });
#pragma warning restore 612, 618
        }
    }
}
